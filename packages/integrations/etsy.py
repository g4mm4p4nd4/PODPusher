from __future__ import annotations

import logging
import os
from typing import Dict, Optional

import httpx

logger = logging.getLogger(__name__)
API_BASE = "https://openapi.etsy.com/v3/application"


def _format_price(value: Optional[float]) -> str:
    if value is None:
        return "19.99"
    try:
        return f"{float(value):.2f}"
    except (TypeError, ValueError):
        return "19.99"


def build_listing_payload(product: Dict) -> Dict:
    title = (product.get("title") or "Automated Print-On-Demand Listing").strip()[:140]
    description = (product.get("description") or "Generated by POD Automator").strip()[:2000]
    tags = product.get("tags") or []
    materials = product.get("materials") or ["cotton"]
    price = product.get("price")
    if isinstance(price, (int, float)) and price > 999:
        price = price / 100
    quantity = product.get("quantity") or 10
    return {
        "title": title,
        "description": description,
        "who_made": "i_did",
        "when_made": "made_to_order",
        "is_supply": False,
        "should_auto_renew": True,
        "taxonomy_id": product.get("taxonomy_id", 100),
        "materials": materials[:13],
        "tags": tags[:13],
        "type": "physical",
        "price": _format_price(price),
        "quantity": quantity,
        "sku": product.get("sku"),
    }


def _publish_listing_stub(product: Dict) -> Dict:
    logger.info("ETSY credentials missing; returning stub listing")
    replica = dict(product)
    listing_id = product.get("listing_id") or "stub-listing"
    replica["listing_id"] = listing_id
    replica["etsy_url"] = product.get("etsy_url") or f"https://etsy.example/{listing_id}"
    replica["listing_url"] = replica["etsy_url"]
    return replica


def _publish_listing_real(
    token: str,
    client_id: str,
    shop_id: str,
    product: Dict,
) -> Dict:
    headers = {
        "Authorization": f"Bearer {token}",
        "x-api-key": client_id,
        "Content-Type": "application/json",
    }
    payload = build_listing_payload(product)
    try:
        response = httpx.post(
            f"{API_BASE}/shops/{shop_id}/listings",
            headers=headers,
            json=payload,
            timeout=15,
        )
        response.raise_for_status()
    except httpx.HTTPError as exc:
        logger.error("Etsy API error: %s", exc)
        raise
    data = response.json()
    listing_id = data.get("listing_id") or data.get("id")
    url = (
        data.get("listing_url")
        or data.get("url")
        or (f"https://www.etsy.com/listing/{listing_id}" if listing_id else None)
    )
    replica = dict(product)
    replica["listing_id"] = listing_id
    replica["etsy_url"] = url
    replica["listing_url"] = url
    replica["etsy_response"] = data
    return replica


def get_etsy_client(credential: Optional[Dict] = None):
    token = None
    shop_id = None
    if credential:
        token = credential.get("access_token")
        shop_id = credential.get("account_id")
    token = token or os.getenv("ETSY_ACCESS_TOKEN")
    shop_id = shop_id or os.getenv("ETSY_SHOP_ID")
    client_id = os.getenv("ETSY_CLIENT_ID")
    if not client_id:
        logger.warning("ETSY_CLIENT_ID missing; falling back to stub client")
        return _publish_listing_stub
    if not token or not shop_id:
        return _publish_listing_stub
    return lambda product: _publish_listing_real(token, client_id, shop_id, product)
